{
	"info": {
		"_postman_id": "1f45710d-8b7e-4285-80a2-9b1a005edbe4",
		"name": "group_25_hw_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function \r",
							"() {\r",
							"    pm.response.to.have.status (200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is string\", function \r",
							"() {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function \r",
							"() {\r",
							"    pm.response.to.have.status (200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var json = '{\"name\":\"Nata\", \"age\":32, \"salary\":50000}';\r",
							"var jsonparse = JSON.parse(json);\r",
							"console.log(json);\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Test name\", function\r",
							"(){\r",
							"    pm.expect(jsonparse.name).to.eql(\"Nata\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Test age\", function  \r",
							"(){\r",
							"    pm.expect(jsonparse.age).to.eql(32);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Test salary\", function\r",
							"(){\r",
							"    pm.expect(jsonparse.salary).to.eql(50000);\r",
							"});\r",
							"// Спарсить request.\r",
							"var jsonrequest = request.data;\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test name var\", function \r",
							"(){\r",
							"    pm.expect(jsonparse.name).to.eql(jsonrequest.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Test age var\", function \r",
							"(){\r",
							"    pm.expect(jsonparse.age).to.eql(+jsonrequest.age);\r",
							"});\r",
							"console.log (typeof(jsonrequest.age));\r",
							"//  Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Test salary var\", function\r",
							"(){\r",
							"    pm.expect(jsonparse.salary).to.eql(+jsonrequest.salary);\r",
							"});\r",
							"//  Вывести в консоль параметр family из response.\r",
							"console.log(jsonparse.family);\r",
							"//  Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"//var jsonparse = pm.response.json();\r",
							"var u_salary_1_5_year=pm.environment.get(jsonparse.family);\r",
							"var salary4=jsonrequest.salary*4;\r",
							"pm.test(\"Test salary 1,5 year = salary var\", function\r",
							"(){\r",
							"    pm.expect(jsonparse.u_salary_1_5_year).to.eql(jsonrequest.salary4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nata",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "50000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200 OK\", function\r",
							"(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var json = '{\"name\":\"Nata\", \"age\":32, \"salary\":50000}';\r",
							"var jsonparse = JSON.parse(json);\r",
							"console.log(jsonparse);\r",
							"//4. Спарсить request.\r",
							"var jsonrequest = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test name var\", function\r",
							"(){\r",
							"    pm.expect(jsonparse.name).to.eql(jsonrequest.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Teast age var\", function\r",
							"(){\r",
							"    pm.expect(jsonparse.age).to.eql(+jsonrequest.age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Test salary var\", function\r",
							"(){\r",
							"    pm.expect(jsonparse.salary).to.eql(+jsonrequest.salary);\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"//var jsonparse = pm.response.json();\r",
							"console.log(jsonparse.family);\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"var dog = pm.response.json();\r",
							"pm.test(\"Test dog have name\", function\r",
							"(){\r",
							"    pm.expect(dog).to.have.property('name');\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Test dog have age\", function\r",
							"(){\r",
							"    pm.expect(dog).to.have.property('age');\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"//var dog = pm.response.json();\r",
							"//var pets = pm.jsonparse.json();\r",
							"//var name = jsonparse.family.pets.dog;\r",
							"pm.test(\"Test name the dog\", function\r",
							"(){\r",
							"    pm.expect(response.family.pets.dog.name.Luky);\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Nata&age=32&salary=50000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nata"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "50000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var json = '{\"name\":\"Nata\", \"age\":\"32\", \"salary\":\"50000\"}';\r",
							"var json_resp = pm.response.json();\r",
							"//var json_resp = JSON.parse(json);\r",
							"//4. Спарсить request.\r",
							"var json_req = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"//var name = json_resp.name;\r",
							"pm.test(\"Test name is request\", function(){\r",
							"    pm.expect(json_resp.name).to.eql(json_req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"//var age = json_resp.age;\r",
							"pm.test(\"Test age is request\", function (){\r",
							"    pm.expect(json_resp.age).to.eql(+json_req.age);\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(json_req.salary);\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(json_resp.salary);\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(json_resp.salary[0]);\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(json_resp.salary[1]);\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(json_resp.salary[2]);\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test salary element 0\", function (){\r",
							"    pm.expect(json_resp.salary[0]).to.eql(+json_req.salary);\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Test salary element 1\", function(){\r",
							"    pm.expect(json_resp.salary[1]).to.eql(\"\"+json_req.salary*2+\"\");\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Test salary element 2\", function (){\r",
							"    pm.expect(json_resp.salary[2]).to.eql(\"\"+json_req.salary*3+\"\");\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", json_resp.name);\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", json_resp.age);\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", json_resp.salary);\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.get(\"name\");\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.get(\"age\");\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.get(\"salary\");\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"//for (let s = json_resp.salary[0]; s <= json_resp.salary[2]; s++) {\r",
							"//\tconsole.log(s);\r",
							"//};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Nata&age=32&salary=50000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nata"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "50000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметр salary из окружения в request\r",
							"var jsonData = pm.response.json();\r",
							"var req_salary = jsonData.salary;\r",
							"pm.environment.get(\"salary\", \"req_salary\");\r",
							"console.log(req_salary);\r",
							"// Вставить параметр age из окружения в age\r",
							"// Вставить параметр name из окружения в name\r",
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"// Спарсить response body в json.\r",
							"// Спарсить request.\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"// Проверить, что json response имеет параметр person\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salar//забрать из request.)\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из reques/(salary забрать из request.)\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nata",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "50000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}